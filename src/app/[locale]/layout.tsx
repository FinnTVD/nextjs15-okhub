import type {Metadata} from 'next'
import {Geist, Geist_Mono} from 'next/font/google'
import '@/styles/globals.css'
import {NextIntlClientProvider, hasLocale} from 'next-intl'
import {notFound} from 'next/navigation'
import {routing} from '@/i18n/routing'
import {setRequestLocale} from 'next-intl/server'
import NextTopLoader from 'nextjs-toploader'
import {Toaster} from '@/components/ui/sonner'
import GsapProvider from '@/provider/GsapProvider'
// import { unstable_ViewTransition as ViewTransition } from 'react'
import {ViewTransitions} from 'next-view-transitions'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export function generateStaticParams() {
  return routing.locales.map((locale) => ({locale}))
}

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode
  params: Promise<{locale: string}>
}>) {
  // Ensure that the incoming `locale` is valid
  const {locale} = await params
  if (!hasLocale(routing.locales, locale)) {
    notFound()
  }

  // Enable static rendering
  setRequestLocale(locale)

  return (
    <ViewTransitions>
      <html lang={locale}>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <NextIntlClientProvider>
            <GsapProvider>{children}</GsapProvider>
          </NextIntlClientProvider>
          <NextTopLoader
            color='linear-gradient(90deg, #89f7fe 0%, #66a6ff 100%)'
            initialPosition={0.08}
            crawlSpeed={200}
            height={3}
            crawl={true}
            showSpinner={true}
            easing='ease'
            speed={200}
            shadow='0 0 10px #2299DD,0 0 5px #2299DD'
            template='<div class="bar" role="bar"><div class="peg"></div></div> 
    <div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
            zIndex={1600}
            showAtBottom={false}
          />
          <Toaster richColors />
        </body>
      </html>
    </ViewTransitions>
  )
}
